"""
Dummy File Generator for Pattern Testing

Generates realistic dummy video and subtitle files for all 25 episode patterns.
Files are minimal (1KB) but have valid structure for testing pattern matching.

Usage:
    python tests/generate_test_files.py

Output:
    tests/fixtures/pattern_files/pattern_##_<name>/
        ├── <video_variation_1>.mkv
        ├── <video_variation_2>.mkv
        ├── <subtitle_variation_1>.srt
        ├── <subtitle_variation_2>.srt
        └── ...

Version: 3.2.0
"""

import json
import sys
from pathlib import Path


def create_dummy_video(filepath: Path, size_kb: int = 1):
    """
    Create a minimal dummy video file (.mkv format).
    
    Args:
        filepath: Path where the video file should be created
        size_kb: Target file size in KB (default: 1KB)
    """
    # Create minimal valid MKV header (simplified)
    # For testing purposes, we just need a file with .mkv extension
    # Real MKV header would be complex, but pattern matching only checks filenames
    mkv_header = b'\x1a\x45\xdf\xa3'  # EBML header signature
    
    # Pad to reach target size
    content = mkv_header + b'\x00' * (size_kb * 1024 - len(mkv_header))
    
    filepath.parent.mkdir(parents=True, exist_ok=True)
    with open(filepath, 'wb') as f:
        f.write(content)


def create_dummy_subtitle(filepath: Path, size_kb: int = 1):
    """
    Create a minimal dummy subtitle file (.srt format).
    
    Args:
        filepath: Path where the subtitle file should be created
        size_kb: Target file size in KB (default: 1KB)
    """
    # Create valid SRT format content
    srt_content = """1
00:00:01,000 --> 00:00:05,000
This is a dummy subtitle file for pattern testing.

2
00:00:05,000 --> 00:00:10,000
Pattern matching only checks filenames, not content.

3
00:00:10,000 --> 00:00:15,000
Generated by SubFast v3.2.0 test suite.

"""
    
    # Repeat content to reach target size
    content = srt_content
    while len(content.encode('utf-8')) < size_kb * 1024:
        content += srt_content
    
    filepath.parent.mkdir(parents=True, exist_ok=True)
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(content)


def generate_pattern_files(pattern: dict, base_dir: Path) -> tuple:
    """
    Generate dummy files for a single pattern with [VAR#] prefixes.
    
    Args:
        pattern: Pattern definition from JSON (new VAR-based structure)
        base_dir: Base directory for pattern files
    
    Returns:
        Tuple of (videos_created, subtitles_created)
    """
    pattern_id = pattern['id']
    pattern_name = pattern['name'].replace('##', '').replace('#', '').replace(' ', '_').strip('_')
    
    # Create pattern directory
    pattern_dir = base_dir / f"pattern_{pattern_id:02d}_{pattern_name}"
    pattern_dir.mkdir(parents=True, exist_ok=True)
    
    videos_created = 0
    subtitles_created = 0
    
    # Generate files for each variation
    for variation in pattern.get('variations', []):
        var_id = variation['var_id']  # e.g., "VAR1"
        video_template = variation['video_template']
        subtitle_template = variation['subtitle_template']
        
        # Add [VAR#] prefix to filenames
        video_filename = f"[{var_id}]-{video_template}"
        subtitle_filename = f"[{var_id}]-{subtitle_template}"
        
        # Generate video file
        video_path = pattern_dir / video_filename
        create_dummy_video(video_path)
        videos_created += 1
        
        # Generate subtitle file
        subtitle_path = pattern_dir / subtitle_filename
        create_dummy_subtitle(subtitle_path)
        subtitles_created += 1
    
    return (videos_created, subtitles_created)


def generate_all_pattern_files():
    """
    Main function: Read pattern definitions and generate all dummy files.
    """
    # Determine script location and project root
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    
    # Load pattern definitions
    pattern_file = script_dir / 'fixtures' / 'pattern_definitions.json'
    
    if not pattern_file.exists():
        print(f"[ERROR] Pattern definitions file not found: {pattern_file}")
        print("Please ensure tests/fixtures/pattern_definitions.json exists.")
        sys.exit(1)
    
    with open(pattern_file, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    patterns = data.get('patterns', [])
    
    if not patterns:
        print("[ERROR] No patterns found in pattern_definitions.json")
        sys.exit(1)
    
    # Create base directory for pattern files
    base_dir = script_dir / 'fixtures' / 'pattern_files'
    base_dir.mkdir(parents=True, exist_ok=True)
    
    # Statistics
    total_videos = 0
    total_subtitles = 0
    patterns_processed = 0
    
    print("=" * 80)
    print("SubFast v3.2.0 - Dummy File Generator for Pattern Testing")
    print("=" * 80)
    print(f"\nBase directory: {base_dir}")
    print(f"Total patterns to process: {len(patterns)}\n")
    
    # Generate files for each pattern
    for pattern in patterns:
        pattern_id = pattern['id']
        pattern_name = pattern['name']
        
        try:
            videos, subtitles = generate_pattern_files(pattern, base_dir)
            total_videos += videos
            total_subtitles += subtitles
            patterns_processed += 1
            
            print(f"[OK] Pattern {pattern_id:02d}: {pattern_name:<20} "
                  f"({videos} videos, {subtitles} subtitles)")
        
        except Exception as e:
            print(f"[FAIL] Pattern {pattern_id:02d}: {pattern_name:<20} FAILED - {e}")
    
    # Summary
    print("\n" + "=" * 80)
    print("GENERATION SUMMARY")
    print("=" * 80)
    print(f"Patterns processed:    {patterns_processed}/{len(patterns)}")
    print(f"Video files created:   {total_videos}")
    print(f"Subtitle files created: {total_subtitles}")
    print(f"Total files created:   {total_videos + total_subtitles}")
    print("=" * 80)
    
    if patterns_processed == len(patterns):
        print("\n[SUCCESS] All pattern files generated successfully!")
        return 0
    else:
        print(f"\n[ERROR] Some patterns failed. Check errors above.")
        return 1


if __name__ == '__main__':
    sys.exit(generate_all_pattern_files())
