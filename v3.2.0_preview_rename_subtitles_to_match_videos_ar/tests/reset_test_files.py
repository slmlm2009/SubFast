"""
Test Environment Reset Script

Resets all test files to pristine state by deleting and regenerating dummy files.
Useful for manual testing that modifies filenames or when test artifacts need cleanup.

Usage:
    python tests/reset_test_files.py

What it does:
    1. Deletes all files in tests/fixtures/pattern_files/
    2. Re-runs generate_test_files.py to regenerate dummy files
    3. Verifies expected file count matches actual
    4. Reports success or failure

Version: 3.2.0
"""

import shutil
import sys
from pathlib import Path


def reset_test_environment():
    """
    Reset test environment to pristine state.
    
    Returns:
        0 on success, 1 on failure
    """
    # Determine script location
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    
    # Pattern files directory
    pattern_files_dir = script_dir / 'fixtures' / 'pattern_files'
    
    print("=" * 80)
    print("SubFast v3.2.0 - Test Environment Reset")
    print("=" * 80)
    print(f"\nTarget directory: {pattern_files_dir}\n")
    
    # Step 1: Delete existing pattern files
    if pattern_files_dir.exists():
        print("[STEP 1] Deleting existing pattern files...")
        try:
            # Count files before deletion
            file_count = sum(1 for _ in pattern_files_dir.rglob('*') if _.is_file())
            dir_count = sum(1 for _ in pattern_files_dir.iterdir() if _.is_dir())
            
            print(f"  Found: {file_count} files in {dir_count} directories")
            
            # Delete each pattern directory (including backup/ folders)
            for pattern_dir in pattern_files_dir.iterdir():
                if pattern_dir.is_dir():
                    shutil.rmtree(pattern_dir)
            print("  [OK] All files and directories deleted (including backup/ folders)")
        
        except Exception as e:
            print(f"  [ERROR] Failed to delete files: {e}")
            return 1
    else:
        print("[STEP 1] Pattern files directory doesn't exist (first run?)")
    
    # Step 2: Regenerate files
    print("\n[STEP 2] Regenerating pattern files...")
    try:
        # Import and run the generator
        from generate_test_files import generate_all_pattern_files
        
        result = generate_all_pattern_files()
        
        if result != 0:
            print("  [ERROR] File generation failed")
            return 1
        
        print("  [OK] Files regenerated successfully")
    
    except Exception as e:
        print(f"  [ERROR] Failed to regenerate files: {e}")
        return 1
    
    # Step 3: Verify file count
    print("\n[STEP 3] Verifying file count...")
    try:
        if not pattern_files_dir.exists():
            print("  [ERROR] Pattern files directory was not created")
            return 1
        
        video_count = sum(1 for _ in pattern_files_dir.rglob('*.mkv'))
        subtitle_count = sum(1 for _ in pattern_files_dir.rglob('*.srt'))
        total_files = video_count + subtitle_count
        
        # Expected: 25 patterns Ã— ~3-4 variations each = 77 videos + 77 subtitles = 154 total
        expected_min = 150  # Allow some variation
        expected_max = 160
        
        print(f"  Video files: {video_count}")
        print(f"  Subtitle files: {subtitle_count}")
        print(f"  Total files: {total_files}")
        
        if expected_min <= total_files <= expected_max:
            print(f"  [OK] File count within expected range ({expected_min}-{expected_max})")
        else:
            print(f"  [WARNING] File count outside expected range ({expected_min}-{expected_max})")
    
    except Exception as e:
        print(f"  [ERROR] Failed to verify files: {e}")
        return 1
    
    # Step 4: Clean up any test artifacts (PRESERVE tests/reports/)
    print("\n[STEP 4] Cleaning up test artifacts...")
    try:
        # Check for common test artifact directories
        # NOTE: Preserving tests/reports/ directory and all reports
        artifacts = [
            script_dir / '__pycache__',  # Python cache
            pattern_files_dir / '**' / 'renaming_report.csv',  # Pattern CSV reports
        ]
        
        cleaned = 0
        
        # Clean Python cache
        if (script_dir / '__pycache__').exists():
            shutil.rmtree(script_dir / '__pycache__')
            cleaned += 1
        
        # Clean CSV reports from pattern folders (generated by integration tests)
        for csv_file in pattern_files_dir.rglob('renaming_report.csv'):
            if csv_file.exists():
                csv_file.unlink()
                cleaned += 1
        
        if cleaned > 0:
            print(f"  [OK] Cleaned {cleaned} artifact(s)")
        else:
            print("  [OK] No artifacts to clean")
        
        # Note about preserved reports
        reports_dir = script_dir / 'reports'
        if reports_dir.exists():
            report_count = len(list(reports_dir.glob('*.txt')))
            print(f"  [INFO] Preserved {report_count} test report(s) in tests/reports/")
    
    except Exception as e:
        print(f"  [WARNING] Failed to clean some artifacts: {e}")
        # Not a critical failure
    
    # Summary
    print("\n" + "=" * 80)
    print("RESET SUMMARY")
    print("=" * 80)
    print(f"Status: SUCCESS")
    print(f"Pattern files: {total_files} files in {pattern_files_dir}")
    print(f"Test environment is ready for manual testing")
    print("=" * 80)
    
    return 0


if __name__ == '__main__':
    sys.exit(reset_test_environment())
